"use strict";
var path = require("path");
var util = require("util");
var yeoman = require("yeoman-generator");

module.exports = ExpressGenerator;

function ExpressGenerator() {
	yeoman.generators.Base.apply(this, arguments);
}

util.inherits(ExpressGenerator, yeoman.generators.Base);

ExpressGenerator.prototype.setupEnv = function setupEnv() {
	this.sourceRoot(path.join(__dirname, "../templates/custom"));
	this.directory(".", ".", true);
	this.mkdir("public/img");
	this.mkdir("public/js/components");
	this.mkdir("public/js");
	this.template("_bower.json", "bower.json");
	this.template("_package.json", "package.json");
	this.template("_app.js", "app.js");
};

ExpressGenerator.prototype.packageJSON = function packageJSON() {
	this.template("package.json", "package.json");
};

ExpressGenerator.prototype.promptUser = function promptUser() {

	var boolRegex = /^(?:y(?:es)?|n(?:o)?)$/i,
		boolFilter = function (value) {
			value = value.toLowerCase();
			if (value === "y" || value === "yes") {
				return true;
			}
			return false;
		};
	var cb = this.async(),
		self = this;
	var prompts = [
		{
			name: "name",
			message: "What is the name of your project?",
			required: true,
			advanced: false
		},

		{
			name: "description",
			message: "Give me a description on what your app is supposed to do",
			default: "App generated by express custom generator",
			required: false,
			advanced: false
		},

		{
			name: "keywords",
			message: "Give me keywords that correspond to the site. (comma-separated)",
			default: "",
			required: false,
			advanced: true
		},

		{
			name: "icons",
			type: "confirm",
			message: "Would you like to enable and include default icomoon icons?",
			required: true,
			advanced: false,
			pattern: boolRegex
		},

		//js libraries to include
		{
			name: "modernizr",
			message: "Would you like to use Modernizr?",
			required: true,
			advanced: false,
			pattern: boolRegex
		},

		{
			name: "jQuery",
			message: "Would you like to use jQuery?",
			type: "confirm",
			required: true,
			advanced: false,
			pattern: boolRegex
		},

		{
			name: "requirejs",
			message: "Would you like to use requireJS and AMD modules?",
			type: "confirm",
			required: true,
			advanced: false,
			pattern: boolRegex
		},

		//author and header info
		{
			name: "authorName",
			message: "Who is the creator of this site?",
			default: "Sean Goresht",
			required: false,
			advanced: true
		},

		{
			name: "authorURL",
			message: "What is the site where the author can be reached?",
			required: true,
			advanced: true
		},

		{
			name: "authorGitHub",
			message: "What is your gitHub account?",
			required: true,
			advanced: true
		},

		{
			name: "authorTwitter",
			message: "What is your Twitter account?",
			required: true,
			advanced: true
		},

		{
			name: "pages",
			message: "(Optional) Enter the pages you wish to create for this site -- comma-separated",
			default: "about, features, contact",
			required: false,
			advanced: true
		},

		{
			name: "lessMiddleWare",
			message: "(Optional) Enter the pages you wish to create for this site -- comma-separated",
			default: "about, features, contact",
			required: false,
			advanced: true
		}
	];

	this.prompt(prompts, function (props) {
		// set the property to parse the gruntfile
		self.description = props.description;
		self.keywords = props.keywords;
		self.icons = props.icons;
		self.modernizr = props.modernizr;
		self.jQuery = props.jQuery;
		self.requirejs = props.requirejs;
		self.authorName = props.authorName;
		self.authorURL = props.authorURL;
		self.authorGitHub = props.authorGitHub;
		self.authorTwitter = props.authorTwitter;
		self.authorPages = props.authorPages;

		//once the prompts are finished, do the callback
		cb();
	});
};
